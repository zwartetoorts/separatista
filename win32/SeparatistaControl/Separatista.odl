/***************************************************************************
 *   Copyright (C) 2013 by Okkel Klaver   *
 *   info@vanhetland.nl   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

[
   uuid(6B20C63D-F57B-4755-9D58-11D93D7EC908), 
   helpstring("Separatista 1.0 Type Library."),
   lcid(0),
   version(1)
]

library Separatista
{
	importlib("stdole.tlb");
	importlib("stdole2.tlb");

	/**
		IBAN
	*/
	[
		uuid(3CDADD67-109C-49b4-9B1B-5C10B7121EB6),
		helpstring("IIBAN interface"),
		oleautomation,
		dual,
		odl
	]
	interface IIBAN : IDispatch
	{
		[propget, helpstring("IBAN as text")]
		HRESULT __stdcall IBAN(
			[out, retval] BSTR *pIBAN);
		[propput, helpstring("IBAN as text")]
		HRESULT __stdcall IBAN(
			[in] BSTR iban);
		[helpstring("Check validity of an IBAN number")]
		HRESULT __stdcall Check(
			[out, retval] VARIANT_BOOL *pValid);
	};
	[
		uuid(2BD7342E-B12D-45b0-A5D6-ADF118386112),
		helpstring("IBAN object")
	]
	coclass IBAN
	{
		[default] interface IIBAN;
		interface IDispatch;
	};

	/**
		MT940SRecordset
	*/
	[
		uuid(B61526D3-1B0E-42c0-A276-C0F1DAA94CC8),
		helpstring("IMT940SRecordset interface"),
		oleautomation,
		dual,
		odl
	]
	interface IMT940SRecordset : IDispatch
	{
		[ propget, helpstring("Client Currency") ]
		HRESULT __stdcall CurrencyClient(
			[out, retval] BSTR *pCurrencyClient);

		[ propget, helpstring("Transaction Reference") ]
		HRESULT __stdcall TransactionReference(
			[out, retval] BSTR *pTransactionReference);

		[ propget, helpstring("Serial Number") ]
		HRESULT __stdcall SerialNumber(
			[out, retval] BSTR *pSerialNumber);

		[ propget, helpstring("The Client IBAN") ]
		HRESULT __stdcall IBANClient(
			[out, retval] IIBAN **ppIBANClient);

		[ propget, helpstring("Previous Balance") ]
		HRESULT __stdcall PreviousBalance(
			[out, retval] VARIANT *pPreviousBalance);

		[ propget, helpstring("Previous Balance Date") ]
		HRESULT __stdcall PreviousBalanceDate(
			[out, retval] DATE *pPreviousBalanceDate);

		[ propget, helpstring("Current Balance") ]
		HRESULT __stdcall CurrentBalance(
			[out, retval] VARIANT *pCurrentBalance);

		[ propget, helpstring("Current Balance Date") ]
		HRESULT __stdcall CurrentBalanceDate(
			[out, retval] DATE *pCurrentBalanceDate);

		[ helpstring("Move the internal pointer to the to first record") ]
		HRESULT __stdcall MoveFirst();

		[ helpstring("Move the internal pointer to the next record") ]
		HRESULT __stdcall MoveNext();

		[ propget, helpstring("Check for the End-Of-File bit") ]
		HRESULT __stdcall EOF(
			[out, retval] VARIANT_BOOL *pEOF);

		[ propget, helpstring("Transaction date") ]
		HRESULT __stdcall TransactionDate(
			[out, retval] DATE *pTransactionDate);

		[propget, helpstring("RDC Code")]
		HRESULT __stdcall RDCCode(
			[out, retval] BSTR *pRDCCode);

		[propget, helpstring("Currency")]
		HRESULT __stdcall Currency(
			[out, retval] VARIANT *pCurrency);

		[propget, helpstring("Transaction code")]
		HRESULT __stdcall TransactionCode(
			[out, retval] BSTR *pTransactionCode);

		[propget, helpstring("Transaction Reference")]
		HRESULT __stdcall TransactionRef(
			[out, retval] BSTR *pTransactionReference);

		[propget, helpstring("Foreign IBAN")]
		HRESULT __stdcall ForeignIBAN(
			[out, retval] IIBAN **ppIBAN);

		[propget, id(DISPID_VALUE),
			helpstring("Get the description by key")]
		HRESULT __stdcall Description(
			[in] VARIANT vKey,
			[out, retval] BSTR *pValue);

		[propget, id(DISPID_NEWENUM),
			restricted, helpstring("Get the key enumerator")]
		HRESULT __stdcall _NewEnum(
			[out, retval] IUnknown **ppUnk);
	};
	[
		uuid(343F637E-DA0B-43a4-A802-8F9EF2DCC5DF),
		helpstring("MT940SRecordset object")
	]
	coclass MT940SRecordset 
	{
		[default] interface IMT940SRecordset;
		interface IDispatch;
	};

	/**
		MT940SDocument
	*/
	typedef enum
	{
		OK,
		E_FILE,
		E_FORMAT,
		E_MEMORY
	} MT940SOpenStatus;
	
	[
		uuid(051E4622-F5B0-40c4-81BC-F12EB35F1868),
		helpstring("IMT940SDocument interface"),
		oleautomation,
		dual,
		odl
	]
	interface IMT940SDocument : IDispatch
	{
		[ helpstring("Open a mt940s document") ]
		HRESULT __stdcall Open(
			[in] BSTR Path,
			[out, retval] MT940SOpenStatus* pStatus);

		[ propget, helpstring("The number of MT940SRecordsets in this MT940SDocument" ) ]
		HRESULT __stdcall RecordsetCount(
			[out, retval] long *plCount);

		[ propget, id(DISPID_VALUE),
			helpstring("Get the MT940Recordset at index") ]
		HRESULT __stdcall Item(
			[in] VARIANT vIndex,
			[out, retval] IMT940SRecordset **ppIMT940SRecordset);

		[ propget, restricted, id(DISPID_NEWENUM), 
			helpstring("Get the enumerator") ]
		HRESULT __stdcall _NewEnum(
			[out, retval] IUnknown **ppUnk);


	};

	[
		uuid(6DF05A76-0582-415a-9B96-163F76914250),
		helpstring("MT940SDocument object")
	]
	coclass MT940SDocument 
	{
		[default] interface IMT940SDocument;
		interface IDispatch;
	};

	/**
		Element
	*/
	[
		uuid(006D9323-D6C2-4D53-9072-9AE379CEF7DE),
		helpstring("IElement interface"),
		oleautomation,
		dual,
		odl
	]
	interface IElement : IDispatch
	{
		[ propget, helpstring("The element XML tag") ]
		HRESULT __stdcall TagName(
			[out, retval] BSTR *pTagName);
		[ propget, helpstring("The element value"), id(DISPID_VALUE) ]
		HRESULT __stdcall Value(
			[out, retval] BSTR *pValue);
		[ propput, helpstring("The element value"), id(DISPID_VALUE) ]
		HRESULT __stdcall Value(
			[in] BSTR Value);
		[ propget, helpstring("The element value as date") ]
		HRESULT __stdcall DateValue(
			[out, retval] DATE *pDateValue);
		[ propput, helpstring("The element value as date") ]
		HRESULT __stdcall DateValue(
			[in] DATE DateValue);
		[ helpstring("Get the element by tag name at index") ]
		HRESULT __stdcall GetElementByTagName(
			[in] BSTR TagName,
			[in, defaultvalue(0)] int index,
			[out, retval] IElement **ppElement);
		[ helpstring("Create the element by tag name at index") ]
		HRESULT __stdcall CreateElementByTagName(
			[in] BSTR TagName,
			[in, defaultvalue(0)] int index,
			[out, retval] IElement **ppElement);
		[ helpstring("Destroy the child element") ]
		HRESULT __stdcall DestroyElement(
			[in] IElement *ChildElement);
		[ helpstring("Returns the value of an attribute by name") ]
		HRESULT __stdcall GetAttributeValue(
			[in] BSTR AttributeName,
			[out, retval] BSTR *pValue);
		[ helpstring("Set the value of an attribute by name") ]
		HRESULT __stdcall SetAttributeValue(
			[in] BSTR AttributeName,
			[in] BSTR Value);
	};

	[
		uuid(0F74285B-C429-4A58-95AC-B1A05B856530),
		helpstring("Element object")
	]
	coclass Element
	{
		[default] interface IElement;
		interface ISupportErrorInfo;
		interface IDispatch;
	};

	typedef enum
	{
		IOERR_SUCCESS = 0,
		IOERR_UNKNOWN,
		IOERR_PLATFORM,
		IOERR_XERCES,
		IOERR_SEPARATISTA,
		IOERR_DOCUMENT_INVALID,
		IOERR_USER
	} IOErrorCode;

	/**
		CustomerDirectDebitInitiation
	*/

	[
		uuid(4B8AC337-5E17-454D-A7EC-8955B07B99CC),
		helpstring("ICustomerDirectDebitInitiation interface"),
		oleautomation,
		dual,
		odl
	]
	interface ICustomerDirectDebitInitiation : IDispatch
	{
		[ propget, helpstring("The document namespace.") ]
		HRESULT __stdcall Namespace(
			[out, retval] BSTR *pNamespace);
		[ propget, helpstring("The root element") ]
		HRESULT __stdcall RootElement(
			[out, retval] IElement **ppElement);
		[ helpstring("Shows the user a save dialog and saves the document to the specified location.") ]
		HRESULT __stdcall Save(
			[in, defaultvalue(NULL)] long hWnd,
			[out, retval] IOErrorCode *errorCode);
		[helpstring("Saves the document to the specified location.")]
		HRESULT __stdcall SaveAs(
			[in] BSTR Path,
			[out, retval] IOErrorCode *errorCode);
		[helpstring("Shows the user a file open dialog and opens the document from the specified location.")]
		HRESULT __stdcall Open(
			[in, defaultvalue(NULL)] long hWnd,
			[out, retval] IOErrorCode *errorCode);
		[helpstring("Opens the document from the specified location.")]
		HRESULT __stdcall OpenFrom(
			[in] BSTR Path,
			[out, retval] IOErrorCode *errorCode);

	};

	[
		uuid(A3142FEC-FB2E-4715-B5DF-C4F7844D2956),
		helpstring("CustomerDirectDebitInitiation object")
	]
	coclass CustomerDirectDebitInitiation
	{
		[default] interface ICustomerDirectDebitInitiation;
		interface ISupportErrorInfo;
		interface IDispatch;
	};

}
